// Generated by LiveScript 1.3.1
var react;
react = require('react/addons');
module.exports = {
  applyHeadingOne: function(){
    return this.applyHeading('h1');
  },
  applyHeadingTwo: function(){
    return this.applyHeading('h2');
  },
  applyHeadingThree: function(){
    return this.applyHeading('h3');
  },
  applyHeadingFour: function(){
    return this.applyHeading('h4');
  },
  applyHeading: function(headingLevel){
    var selection, selectionAnchorNode, selectionExtentNode, startIndex, endIndex, swap, childNodesConfig, i$, i, config, content;
    selection = window.getSelection();
    selectionAnchorNode = this.getTopLevelSelectionNode(selection.anchorNode);
    selectionExtentNode = this.getTopLevelSelectionNode(selection.extentNode);
    startIndex = selectionAnchorNode.getAttribute('data-tag-key').split('.')[1] * 1;
    endIndex = selectionExtentNode.getAttribute('data-tag-key').split('.')[1] * 1;
    if (startIndex > endIndex) {
      swap = startIndex;
      startIndex = endIndex;
      endIndex = swap;
    }
    childNodesConfig = {};
    for (i$ = startIndex; i$ <= endIndex; ++i$) {
      i = i$;
      childNodesConfig[i] = {
        tagName: {
          $set: headingLevel
        }
      };
    }
    config = {
      childNodes: childNodesConfig
    };
    content = react.addons.update(this.state.content, config);
    return this.setState({
      content: this.addKeysToTags(content, this.state.rootKey)
    });
  },
  getTopLevelSelectionNode: function(selectionNode){
    if (!selectionNode.tagName) {
      selectionNode = selectionNode.parentNode;
    }
    while (['div', 'p', 'h1', 'h2', 'h3', 'h4', 'code'].indexOf(selectionNode.tagName.toLowerCase()) === -1) {
      selectionNode = selectionNode.parentNode;
    }
    return selectionNode;
  }
};